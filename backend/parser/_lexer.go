// Code generated from Lexer.g4 by ANTLR 4.13.0. DO NOT EDIT.

package parser

import (
	"fmt"
	"github.com/antlr4-go/antlr/v4"
	"sync"
	"unicode"
)

// Suppress unused import error
var _ = fmt.Printf
var _ = sync.Once{}
var _ = unicode.IsLetter

type Lexer struct {
	*antlr.BaseLexer
	channelNames []string
	modeNames    []string
	// TODO: EOF string
}

var LexerLexerStaticData struct {
	once                   sync.Once
	serializedATN          []int32
	ChannelNames           []string
	ModeNames              []string
	LiteralNames           []string
	SymbolicNames          []string
	RuleNames              []string
	PredictionContextCache *antlr.PredictionContextCache
	atn                    *antlr.ATN
	decisionToDFA          []*antlr.DFA
}

func lexerLexerInit() {
	staticData := &LexerLexerStaticData
	staticData.ChannelNames = []string{
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	}
	staticData.ModeNames = []string{
		"DEFAULT_MODE",
	}
	staticData.LiteralNames = []string{
		"", "'Int'", "'Float'", "'String'", "'Bool'", "'Character'", "'nil'",
		"'var'", "'let'", "'func'", "'inout'", "'&'", "'print'", "'if'", "'else'",
		"'switch'", "'case'", "'default'", "'while'", "'for'", "'in'", "'guard'",
		"'continue'", "'break'", "'return'", "';'", "':'", "'='", "'?'", "'+='",
		"'-='", "'_'",
	}
	staticData.SymbolicNames = []string{
		"", "INT", "FLOAT", "STRING", "BOOL", "CHAR", "NIL", "VAR", "LET", "FUNC",
		"INOUT", "REFERENCE", "PRINT", "IF", "ELSE", "SWITCH", "CASE", "DEFAULT",
		"WHILE", "FOR", "IN", "GUARD", "CONTINUE", "BREAK", "RETURN", "SEMICOLON",
		"COLON", "EQUAL", "QUESTION_MARK", "INCREMENT", "DECREMENT", "UNDERSCORE",
		"DIGIT", "STR", "ID", "WHITESPACE", "MULTI_COMMENT", "LINE_COMMENT",
	}
	staticData.RuleNames = []string{
		"INT", "FLOAT", "STRING", "BOOL", "CHAR", "NIL", "VAR", "LET", "FUNC",
		"INOUT", "REFERENCE", "PRINT", "IF", "ELSE", "SWITCH", "CASE", "DEFAULT",
		"WHILE", "FOR", "IN", "GUARD", "CONTINUE", "BREAK", "RETURN", "SEMICOLON",
		"COLON", "EQUAL", "QUESTION_MARK", "INCREMENT", "DECREMENT", "UNDERSCORE",
		"DIGIT", "STR", "ID", "WHITESPACE", "MULTI_COMMENT", "LINE_COMMENT",
		"ESC_SEQ",
	}
	staticData.PredictionContextCache = antlr.NewPredictionContextCache()
	staticData.serializedATN = []int32{
		4, 0, 37, 291, 6, -1, 2, 0, 7, 0, 2, 1, 7, 1, 2, 2, 7, 2, 2, 3, 7, 3, 2,
		4, 7, 4, 2, 5, 7, 5, 2, 6, 7, 6, 2, 7, 7, 7, 2, 8, 7, 8, 2, 9, 7, 9, 2,
		10, 7, 10, 2, 11, 7, 11, 2, 12, 7, 12, 2, 13, 7, 13, 2, 14, 7, 14, 2, 15,
		7, 15, 2, 16, 7, 16, 2, 17, 7, 17, 2, 18, 7, 18, 2, 19, 7, 19, 2, 20, 7,
		20, 2, 21, 7, 21, 2, 22, 7, 22, 2, 23, 7, 23, 2, 24, 7, 24, 2, 25, 7, 25,
		2, 26, 7, 26, 2, 27, 7, 27, 2, 28, 7, 28, 2, 29, 7, 29, 2, 30, 7, 30, 2,
		31, 7, 31, 2, 32, 7, 32, 2, 33, 7, 33, 2, 34, 7, 34, 2, 35, 7, 35, 2, 36,
		7, 36, 2, 37, 7, 37, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 3, 1, 3, 1, 3, 1,
		3, 1, 3, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1,
		5, 1, 5, 1, 5, 1, 5, 1, 6, 1, 6, 1, 6, 1, 6, 1, 7, 1, 7, 1, 7, 1, 7, 1,
		8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 10, 1,
		10, 1, 11, 1, 11, 1, 11, 1, 11, 1, 11, 1, 11, 1, 12, 1, 12, 1, 12, 1, 13,
		1, 13, 1, 13, 1, 13, 1, 13, 1, 14, 1, 14, 1, 14, 1, 14, 1, 14, 1, 14, 1,
		14, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16,
		1, 16, 1, 16, 1, 16, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 18, 1,
		18, 1, 18, 1, 18, 1, 19, 1, 19, 1, 19, 1, 20, 1, 20, 1, 20, 1, 20, 1, 20,
		1, 20, 1, 21, 1, 21, 1, 21, 1, 21, 1, 21, 1, 21, 1, 21, 1, 21, 1, 21, 1,
		22, 1, 22, 1, 22, 1, 22, 1, 22, 1, 22, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23,
		1, 23, 1, 23, 1, 24, 1, 24, 1, 25, 1, 25, 1, 26, 1, 26, 1, 27, 1, 27, 1,
		28, 1, 28, 1, 28, 1, 29, 1, 29, 1, 29, 1, 30, 1, 30, 1, 31, 4, 31, 227,
		8, 31, 11, 31, 12, 31, 228, 1, 31, 1, 31, 4, 31, 233, 8, 31, 11, 31, 12,
		31, 234, 3, 31, 237, 8, 31, 1, 32, 1, 32, 5, 32, 241, 8, 32, 10, 32, 12,
		32, 244, 9, 32, 1, 32, 1, 32, 1, 33, 3, 33, 249, 8, 33, 1, 33, 5, 33, 252,
		8, 33, 10, 33, 12, 33, 255, 9, 33, 1, 34, 4, 34, 258, 8, 34, 11, 34, 12,
		34, 259, 1, 34, 1, 34, 1, 35, 1, 35, 1, 35, 1, 35, 5, 35, 268, 8, 35, 10,
		35, 12, 35, 271, 9, 35, 1, 35, 1, 35, 1, 35, 1, 35, 1, 35, 1, 36, 1, 36,
		1, 36, 1, 36, 5, 36, 282, 8, 36, 10, 36, 12, 36, 285, 9, 36, 1, 36, 1,
		36, 1, 37, 1, 37, 1, 37, 1, 269, 0, 38, 1, 1, 3, 2, 5, 3, 7, 4, 9, 5, 11,
		6, 13, 7, 15, 8, 17, 9, 19, 10, 21, 11, 23, 12, 25, 13, 27, 14, 29, 15,
		31, 16, 33, 17, 35, 18, 37, 19, 39, 20, 41, 21, 43, 22, 45, 23, 47, 24,
		49, 25, 51, 26, 53, 27, 55, 28, 57, 29, 59, 30, 61, 31, 63, 32, 65, 33,
		67, 34, 69, 35, 71, 36, 73, 37, 75, 0, 1, 0, 7, 1, 0, 48, 57, 1, 0, 34,
		34, 3, 0, 65, 90, 95, 95, 97, 122, 4, 0, 48, 57, 65, 90, 95, 95, 97, 122,
		4, 0, 9, 10, 13, 13, 32, 32, 92, 92, 2, 0, 10, 10, 13, 13, 7, 0, 32, 33,
		35, 35, 43, 43, 45, 46, 58, 58, 64, 64, 91, 93, 297, 0, 1, 1, 0, 0, 0,
		0, 3, 1, 0, 0, 0, 0, 5, 1, 0, 0, 0, 0, 7, 1, 0, 0, 0, 0, 9, 1, 0, 0, 0,
		0, 11, 1, 0, 0, 0, 0, 13, 1, 0, 0, 0, 0, 15, 1, 0, 0, 0, 0, 17, 1, 0, 0,
		0, 0, 19, 1, 0, 0, 0, 0, 21, 1, 0, 0, 0, 0, 23, 1, 0, 0, 0, 0, 25, 1, 0,
		0, 0, 0, 27, 1, 0, 0, 0, 0, 29, 1, 0, 0, 0, 0, 31, 1, 0, 0, 0, 0, 33, 1,
		0, 0, 0, 0, 35, 1, 0, 0, 0, 0, 37, 1, 0, 0, 0, 0, 39, 1, 0, 0, 0, 0, 41,
		1, 0, 0, 0, 0, 43, 1, 0, 0, 0, 0, 45, 1, 0, 0, 0, 0, 47, 1, 0, 0, 0, 0,
		49, 1, 0, 0, 0, 0, 51, 1, 0, 0, 0, 0, 53, 1, 0, 0, 0, 0, 55, 1, 0, 0, 0,
		0, 57, 1, 0, 0, 0, 0, 59, 1, 0, 0, 0, 0, 61, 1, 0, 0, 0, 0, 63, 1, 0, 0,
		0, 0, 65, 1, 0, 0, 0, 0, 67, 1, 0, 0, 0, 0, 69, 1, 0, 0, 0, 0, 71, 1, 0,
		0, 0, 0, 73, 1, 0, 0, 0, 1, 77, 1, 0, 0, 0, 3, 81, 1, 0, 0, 0, 5, 87, 1,
		0, 0, 0, 7, 94, 1, 0, 0, 0, 9, 99, 1, 0, 0, 0, 11, 109, 1, 0, 0, 0, 13,
		113, 1, 0, 0, 0, 15, 117, 1, 0, 0, 0, 17, 121, 1, 0, 0, 0, 19, 126, 1,
		0, 0, 0, 21, 132, 1, 0, 0, 0, 23, 134, 1, 0, 0, 0, 25, 140, 1, 0, 0, 0,
		27, 143, 1, 0, 0, 0, 29, 148, 1, 0, 0, 0, 31, 155, 1, 0, 0, 0, 33, 160,
		1, 0, 0, 0, 35, 168, 1, 0, 0, 0, 37, 174, 1, 0, 0, 0, 39, 178, 1, 0, 0,
		0, 41, 181, 1, 0, 0, 0, 43, 187, 1, 0, 0, 0, 45, 196, 1, 0, 0, 0, 47, 202,
		1, 0, 0, 0, 49, 209, 1, 0, 0, 0, 51, 211, 1, 0, 0, 0, 53, 213, 1, 0, 0,
		0, 55, 215, 1, 0, 0, 0, 57, 217, 1, 0, 0, 0, 59, 220, 1, 0, 0, 0, 61, 223,
		1, 0, 0, 0, 63, 226, 1, 0, 0, 0, 65, 238, 1, 0, 0, 0, 67, 248, 1, 0, 0,
		0, 69, 257, 1, 0, 0, 0, 71, 263, 1, 0, 0, 0, 73, 277, 1, 0, 0, 0, 75, 288,
		1, 0, 0, 0, 77, 78, 5, 73, 0, 0, 78, 79, 5, 110, 0, 0, 79, 80, 5, 116,
		0, 0, 80, 2, 1, 0, 0, 0, 81, 82, 5, 70, 0, 0, 82, 83, 5, 108, 0, 0, 83,
		84, 5, 111, 0, 0, 84, 85, 5, 97, 0, 0, 85, 86, 5, 116, 0, 0, 86, 4, 1,
		0, 0, 0, 87, 88, 5, 83, 0, 0, 88, 89, 5, 116, 0, 0, 89, 90, 5, 114, 0,
		0, 90, 91, 5, 105, 0, 0, 91, 92, 5, 110, 0, 0, 92, 93, 5, 103, 0, 0, 93,
		6, 1, 0, 0, 0, 94, 95, 5, 66, 0, 0, 95, 96, 5, 111, 0, 0, 96, 97, 5, 111,
		0, 0, 97, 98, 5, 108, 0, 0, 98, 8, 1, 0, 0, 0, 99, 100, 5, 67, 0, 0, 100,
		101, 5, 104, 0, 0, 101, 102, 5, 97, 0, 0, 102, 103, 5, 114, 0, 0, 103,
		104, 5, 97, 0, 0, 104, 105, 5, 99, 0, 0, 105, 106, 5, 116, 0, 0, 106, 107,
		5, 101, 0, 0, 107, 108, 5, 114, 0, 0, 108, 10, 1, 0, 0, 0, 109, 110, 5,
		110, 0, 0, 110, 111, 5, 105, 0, 0, 111, 112, 5, 108, 0, 0, 112, 12, 1,
		0, 0, 0, 113, 114, 5, 118, 0, 0, 114, 115, 5, 97, 0, 0, 115, 116, 5, 114,
		0, 0, 116, 14, 1, 0, 0, 0, 117, 118, 5, 108, 0, 0, 118, 119, 5, 101, 0,
		0, 119, 120, 5, 116, 0, 0, 120, 16, 1, 0, 0, 0, 121, 122, 5, 102, 0, 0,
		122, 123, 5, 117, 0, 0, 123, 124, 5, 110, 0, 0, 124, 125, 5, 99, 0, 0,
		125, 18, 1, 0, 0, 0, 126, 127, 5, 105, 0, 0, 127, 128, 5, 110, 0, 0, 128,
		129, 5, 111, 0, 0, 129, 130, 5, 117, 0, 0, 130, 131, 5, 116, 0, 0, 131,
		20, 1, 0, 0, 0, 132, 133, 5, 38, 0, 0, 133, 22, 1, 0, 0, 0, 134, 135, 5,
		112, 0, 0, 135, 136, 5, 114, 0, 0, 136, 137, 5, 105, 0, 0, 137, 138, 5,
		110, 0, 0, 138, 139, 5, 116, 0, 0, 139, 24, 1, 0, 0, 0, 140, 141, 5, 105,
		0, 0, 141, 142, 5, 102, 0, 0, 142, 26, 1, 0, 0, 0, 143, 144, 5, 101, 0,
		0, 144, 145, 5, 108, 0, 0, 145, 146, 5, 115, 0, 0, 146, 147, 5, 101, 0,
		0, 147, 28, 1, 0, 0, 0, 148, 149, 5, 115, 0, 0, 149, 150, 5, 119, 0, 0,
		150, 151, 5, 105, 0, 0, 151, 152, 5, 116, 0, 0, 152, 153, 5, 99, 0, 0,
		153, 154, 5, 104, 0, 0, 154, 30, 1, 0, 0, 0, 155, 156, 5, 99, 0, 0, 156,
		157, 5, 97, 0, 0, 157, 158, 5, 115, 0, 0, 158, 159, 5, 101, 0, 0, 159,
		32, 1, 0, 0, 0, 160, 161, 5, 100, 0, 0, 161, 162, 5, 101, 0, 0, 162, 163,
		5, 102, 0, 0, 163, 164, 5, 97, 0, 0, 164, 165, 5, 117, 0, 0, 165, 166,
		5, 108, 0, 0, 166, 167, 5, 116, 0, 0, 167, 34, 1, 0, 0, 0, 168, 169, 5,
		119, 0, 0, 169, 170, 5, 104, 0, 0, 170, 171, 5, 105, 0, 0, 171, 172, 5,
		108, 0, 0, 172, 173, 5, 101, 0, 0, 173, 36, 1, 0, 0, 0, 174, 175, 5, 102,
		0, 0, 175, 176, 5, 111, 0, 0, 176, 177, 5, 114, 0, 0, 177, 38, 1, 0, 0,
		0, 178, 179, 5, 105, 0, 0, 179, 180, 5, 110, 0, 0, 180, 40, 1, 0, 0, 0,
		181, 182, 5, 103, 0, 0, 182, 183, 5, 117, 0, 0, 183, 184, 5, 97, 0, 0,
		184, 185, 5, 114, 0, 0, 185, 186, 5, 100, 0, 0, 186, 42, 1, 0, 0, 0, 187,
		188, 5, 99, 0, 0, 188, 189, 5, 111, 0, 0, 189, 190, 5, 110, 0, 0, 190,
		191, 5, 116, 0, 0, 191, 192, 5, 105, 0, 0, 192, 193, 5, 110, 0, 0, 193,
		194, 5, 117, 0, 0, 194, 195, 5, 101, 0, 0, 195, 44, 1, 0, 0, 0, 196, 197,
		5, 98, 0, 0, 197, 198, 5, 114, 0, 0, 198, 199, 5, 101, 0, 0, 199, 200,
		5, 97, 0, 0, 200, 201, 5, 107, 0, 0, 201, 46, 1, 0, 0, 0, 202, 203, 5,
		114, 0, 0, 203, 204, 5, 101, 0, 0, 204, 205, 5, 116, 0, 0, 205, 206, 5,
		117, 0, 0, 206, 207, 5, 114, 0, 0, 207, 208, 5, 110, 0, 0, 208, 48, 1,
		0, 0, 0, 209, 210, 5, 59, 0, 0, 210, 50, 1, 0, 0, 0, 211, 212, 5, 58, 0,
		0, 212, 52, 1, 0, 0, 0, 213, 214, 5, 61, 0, 0, 214, 54, 1, 0, 0, 0, 215,
		216, 5, 63, 0, 0, 216, 56, 1, 0, 0, 0, 217, 218, 5, 43, 0, 0, 218, 219,
		5, 61, 0, 0, 219, 58, 1, 0, 0, 0, 220, 221, 5, 45, 0, 0, 221, 222, 5, 61,
		0, 0, 222, 60, 1, 0, 0, 0, 223, 224, 5, 95, 0, 0, 224, 62, 1, 0, 0, 0,
		225, 227, 7, 0, 0, 0, 226, 225, 1, 0, 0, 0, 227, 228, 1, 0, 0, 0, 228,
		226, 1, 0, 0, 0, 228, 229, 1, 0, 0, 0, 229, 236, 1, 0, 0, 0, 230, 232,
		5, 46, 0, 0, 231, 233, 7, 0, 0, 0, 232, 231, 1, 0, 0, 0, 233, 234, 1, 0,
		0, 0, 234, 232, 1, 0, 0, 0, 234, 235, 1, 0, 0, 0, 235, 237, 1, 0, 0, 0,
		236, 230, 1, 0, 0, 0, 236, 237, 1, 0, 0, 0, 237, 64, 1, 0, 0, 0, 238, 242,
		5, 34, 0, 0, 239, 241, 8, 1, 0, 0, 240, 239, 1, 0, 0, 0, 241, 244, 1, 0,
		0, 0, 242, 240, 1, 0, 0, 0, 242, 243, 1, 0, 0, 0, 243, 245, 1, 0, 0, 0,
		244, 242, 1, 0, 0, 0, 245, 246, 5, 34, 0, 0, 246, 66, 1, 0, 0, 0, 247,
		249, 7, 2, 0, 0, 248, 247, 1, 0, 0, 0, 249, 253, 1, 0, 0, 0, 250, 252,
		7, 3, 0, 0, 251, 250, 1, 0, 0, 0, 252, 255, 1, 0, 0, 0, 253, 251, 1, 0,
		0, 0, 253, 254, 1, 0, 0, 0, 254, 68, 1, 0, 0, 0, 255, 253, 1, 0, 0, 0,
		256, 258, 7, 4, 0, 0, 257, 256, 1, 0, 0, 0, 258, 259, 1, 0, 0, 0, 259,
		257, 1, 0, 0, 0, 259, 260, 1, 0, 0, 0, 260, 261, 1, 0, 0, 0, 261, 262,
		6, 34, 0, 0, 262, 70, 1, 0, 0, 0, 263, 264, 5, 47, 0, 0, 264, 265, 5, 42,
		0, 0, 265, 269, 1, 0, 0, 0, 266, 268, 9, 0, 0, 0, 267, 266, 1, 0, 0, 0,
		268, 271, 1, 0, 0, 0, 269, 270, 1, 0, 0, 0, 269, 267, 1, 0, 0, 0, 270,
		272, 1, 0, 0, 0, 271, 269, 1, 0, 0, 0, 272, 273, 5, 42, 0, 0, 273, 274,
		5, 47, 0, 0, 274, 275, 1, 0, 0, 0, 275, 276, 6, 35, 0, 0, 276, 72, 1, 0,
		0, 0, 277, 278, 5, 47, 0, 0, 278, 279, 5, 47, 0, 0, 279, 283, 1, 0, 0,
		0, 280, 282, 8, 5, 0, 0, 281, 280, 1, 0, 0, 0, 282, 285, 1, 0, 0, 0, 283,
		281, 1, 0, 0, 0, 283, 284, 1, 0, 0, 0, 284, 286, 1, 0, 0, 0, 285, 283,
		1, 0, 0, 0, 286, 287, 6, 36, 0, 0, 287, 74, 1, 0, 0, 0, 288, 289, 5, 92,
		0, 0, 289, 290, 7, 6, 0, 0, 290, 76, 1, 0, 0, 0, 10, 0, 228, 234, 236,
		242, 248, 253, 259, 269, 283, 1, 6, 0, 0,
	}
	deserializer := antlr.NewATNDeserializer(nil)
	staticData.atn = deserializer.Deserialize(staticData.serializedATN)
	atn := staticData.atn
	staticData.decisionToDFA = make([]*antlr.DFA, len(atn.DecisionToState))
	decisionToDFA := staticData.decisionToDFA
	for index, state := range atn.DecisionToState {
		decisionToDFA[index] = antlr.NewDFA(state, index)
	}
}

// LexerInit initializes any static state used to implement Lexer. By default the
// static state used to implement the lexer is lazily initialized during the first call to
// NewLexer(). You can call this function if you wish to initialize the static state ahead
// of time.
func LexerInit() {
	staticData := &LexerLexerStaticData
	staticData.once.Do(lexerLexerInit)
}

// NewLexer produces a new lexer instance for the optional input antlr.CharStream.
func NewLexer(input antlr.CharStream) *Lexer {
	LexerInit()
	l := new(Lexer)
	l.BaseLexer = antlr.NewBaseLexer(input)
	staticData := &LexerLexerStaticData
	l.Interpreter = antlr.NewLexerATNSimulator(l, staticData.atn, staticData.decisionToDFA, staticData.PredictionContextCache)
	l.channelNames = staticData.ChannelNames
	l.modeNames = staticData.ModeNames
	l.RuleNames = staticData.RuleNames
	l.LiteralNames = staticData.LiteralNames
	l.SymbolicNames = staticData.SymbolicNames
	l.GrammarFileName = "Lexer.g4"
	// TODO: l.EOF = antlr.TokenEOF

	return l
}

// Lexer tokens.
const (
	LexerINT           = 1
	LexerFLOAT         = 2
	LexerSTRING        = 3
	LexerBOOL          = 4
	LexerCHAR          = 5
	LexerNIL           = 6
	LexerVAR           = 7
	LexerLET           = 8
	LexerFUNC          = 9
	LexerINOUT         = 10
	LexerREFERENCE     = 11
	LexerPRINT         = 12
	LexerIF            = 13
	LexerELSE          = 14
	LexerSWITCH        = 15
	LexerCASE          = 16
	LexerDEFAULT       = 17
	LexerWHILE         = 18
	LexerFOR           = 19
	LexerIN            = 20
	LexerGUARD         = 21
	LexerCONTINUE      = 22
	LexerBREAK         = 23
	LexerRETURN        = 24
	LexerSEMICOLON     = 25
	LexerCOLON         = 26
	LexerEQUAL         = 27
	LexerQUESTION_MARK = 28
	LexerINCREMENT     = 29
	LexerDECREMENT     = 30
	LexerUNDERSCORE    = 31
	LexerDIGIT         = 32
	LexerSTR           = 33
	LexerID            = 34
	LexerWHITESPACE    = 35
	LexerMULTI_COMMENT = 36
	LexerLINE_COMMENT  = 37
)
